# Generated by Django 3.2.5 on 2022-04-25 07:49

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='PhyloModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('model_name', models.CharField(blank=True, max_length=200, null=True)),
                ('model_type', models.CharField(blank=True, max_length=200, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='PhyloPackage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('package_name', models.CharField(blank=True, max_length=200, null=True)),
                ('package_version', models.CharField(blank=True, max_length=200, null=True)),
                ('package_type', models.CharField(blank=True, choices=[('BY', 'Bayesian'), ('MP', 'Maximum Parsimony'), ('ML', 'Maximum Likelihood')], max_length=10, null=True)),
                ('run_path', models.CharField(blank=True, max_length=200, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='PhyloRun',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_datetime', models.DateTimeField(blank=True, null=True)),
                ('finish_datetime', models.DateTimeField(blank=True, null=True)),
                ('created_datetime', models.DateTimeField(auto_now_add=True)),
                ('modified_datetime', models.DateTimeField(auto_now=True)),
                ('run_title', models.CharField(blank=True, max_length=200, null=True)),
                ('run_status', models.CharField(blank=True, choices=[('QD', 'Queued'), ('IP', 'In progress'), ('FN', 'Finished'), ('ER', 'Error occurred')], default='QD', max_length=10, null=True)),
                ('run_by', models.CharField(blank=True, max_length=200, null=True)),
                ('datafile', models.FileField(blank=True, upload_to='phylorun_datafile')),
                ('run_directory', models.CharField(blank=True, max_length=200, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='PhyloLeg',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('leg_sequence', models.IntegerField(blank=True, null=True)),
                ('leg_title', models.CharField(blank=True, max_length=200, null=True)),
                ('leg_status', models.CharField(blank=True, choices=[('QD', 'Queued'), ('IP', 'In progress'), ('FN', 'Finished'), ('ER', 'Error occurred')], default='QD', max_length=10, null=True)),
                ('leg_result', models.CharField(blank=True, max_length=200, null=True)),
                ('leg_type', models.CharField(blank=True, choices=[('BY', 'Bayesian'), ('MP', 'Maximum Parsimony'), ('ML', 'Maximum Likelihood')], default='MP', max_length=10, null=True)),
                ('start_datetime', models.DateTimeField(blank=True, null=True)),
                ('finish_datetime', models.DateTimeField(blank=True, null=True)),
                ('created_datetime', models.DateTimeField(auto_now_add=True)),
                ('modified_datetime', models.DateTimeField(auto_now=True)),
                ('ml_bootstrap', models.IntegerField(blank=True, default=0, null=True)),
                ('ml_bootstrap_type', models.CharField(blank=True, choices=[('NB', 'Normal Bootstrap'), ('UF', 'Ultra Fast Bootstrap(IQTree)')], max_length=10, null=True)),
                ('substitution_model', models.CharField(blank=True, max_length=100, null=True)),
                ('mcmc_burnin', models.IntegerField(blank=True, default=1000, null=True)),
                ('mcmc_relburnin', models.BooleanField(default=False)),
                ('mcmc_burninfrac', models.FloatField(blank=True, null=True)),
                ('mcmc_ngen', models.IntegerField(blank=True, default=10000, null=True)),
                ('mcmc_nst', models.IntegerField(blank=True, default=6, null=True)),
                ('mcmc_nrates', models.CharField(blank=True, default='gamma', max_length=50, null=True)),
                ('mcmc_printfreq', models.IntegerField(blank=True, null=True)),
                ('mcmc_samplefreq', models.IntegerField(blank=True, default=100, null=True)),
                ('mcmc_nruns', models.IntegerField(blank=True, default=1, null=True)),
                ('mcmc_nchains', models.IntegerField(blank=True, default=1, null=True)),
                ('leg_package', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='phylomanager.phylopackage')),
                ('run', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='leg_set', to='phylomanager.phylorun')),
            ],
        ),
        migrations.CreateModel(
            name='PhyloUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
